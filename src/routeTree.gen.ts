/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MovieSearchRouteImport } from './routes/movie/search'
import { Route as MovieShortIdRouteImport } from './routes/movie/$shortId'

const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MovieSearchRoute = MovieSearchRouteImport.update({
  id: '/movie/search',
  path: '/movie/search',
  getParentRoute: () => rootRouteImport,
} as any)
const MovieShortIdRoute = MovieShortIdRouteImport.update({
  id: '/movie/$shortId',
  path: '/movie/$shortId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/movie/$shortId': typeof MovieShortIdRoute
  '/movie/search': typeof MovieSearchRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/movie/$shortId': typeof MovieShortIdRoute
  '/movie/search': typeof MovieSearchRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/movie/$shortId': typeof MovieShortIdRoute
  '/movie/search': typeof MovieSearchRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/privacy' | '/movie/$shortId' | '/movie/search'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/privacy' | '/movie/$shortId' | '/movie/search'
  id: '__root__' | '/' | '/privacy' | '/movie/$shortId' | '/movie/search'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivacyRoute: typeof PrivacyRoute
  MovieShortIdRoute: typeof MovieShortIdRoute
  MovieSearchRoute: typeof MovieSearchRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movie/search': {
      id: '/movie/search'
      path: '/movie/search'
      fullPath: '/movie/search'
      preLoaderRoute: typeof MovieSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movie/$shortId': {
      id: '/movie/$shortId'
      path: '/movie/$shortId'
      fullPath: '/movie/$shortId'
      preLoaderRoute: typeof MovieShortIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivacyRoute: PrivacyRoute,
  MovieShortIdRoute: MovieShortIdRoute,
  MovieSearchRoute: MovieSearchRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
