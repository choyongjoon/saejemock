/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SitemapDotxmlRouteImport } from './routes/sitemap[.xml]'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MoviesTrendingRouteImport } from './routes/movies/trending'
import { Route as MoviesRecentRouteImport } from './routes/movies/recent'
import { Route as MoviesPopularRouteImport } from './routes/movies/popular'
import { Route as MovieSearchRouteImport } from './routes/movie/search'
import { Route as MovieShortIdRouteImport } from './routes/movie/$shortId'

const SitemapDotxmlRoute = SitemapDotxmlRouteImport.update({
  id: '/sitemap.xml',
  path: '/sitemap.xml',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesTrendingRoute = MoviesTrendingRouteImport.update({
  id: '/movies/trending',
  path: '/movies/trending',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesRecentRoute = MoviesRecentRouteImport.update({
  id: '/movies/recent',
  path: '/movies/recent',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesPopularRoute = MoviesPopularRouteImport.update({
  id: '/movies/popular',
  path: '/movies/popular',
  getParentRoute: () => rootRouteImport,
} as any)
const MovieSearchRoute = MovieSearchRouteImport.update({
  id: '/movie/search',
  path: '/movie/search',
  getParentRoute: () => rootRouteImport,
} as any)
const MovieShortIdRoute = MovieShortIdRouteImport.update({
  id: '/movie/$shortId',
  path: '/movie/$shortId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/sitemap.xml': typeof SitemapDotxmlRoute
  '/movie/$shortId': typeof MovieShortIdRoute
  '/movie/search': typeof MovieSearchRoute
  '/movies/popular': typeof MoviesPopularRoute
  '/movies/recent': typeof MoviesRecentRoute
  '/movies/trending': typeof MoviesTrendingRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/sitemap.xml': typeof SitemapDotxmlRoute
  '/movie/$shortId': typeof MovieShortIdRoute
  '/movie/search': typeof MovieSearchRoute
  '/movies/popular': typeof MoviesPopularRoute
  '/movies/recent': typeof MoviesRecentRoute
  '/movies/trending': typeof MoviesTrendingRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/sitemap.xml': typeof SitemapDotxmlRoute
  '/movie/$shortId': typeof MovieShortIdRoute
  '/movie/search': typeof MovieSearchRoute
  '/movies/popular': typeof MoviesPopularRoute
  '/movies/recent': typeof MoviesRecentRoute
  '/movies/trending': typeof MoviesTrendingRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/privacy'
    | '/sitemap.xml'
    | '/movie/$shortId'
    | '/movie/search'
    | '/movies/popular'
    | '/movies/recent'
    | '/movies/trending'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/privacy'
    | '/sitemap.xml'
    | '/movie/$shortId'
    | '/movie/search'
    | '/movies/popular'
    | '/movies/recent'
    | '/movies/trending'
  id:
    | '__root__'
    | '/'
    | '/privacy'
    | '/sitemap.xml'
    | '/movie/$shortId'
    | '/movie/search'
    | '/movies/popular'
    | '/movies/recent'
    | '/movies/trending'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivacyRoute: typeof PrivacyRoute
  SitemapDotxmlRoute: typeof SitemapDotxmlRoute
  MovieShortIdRoute: typeof MovieShortIdRoute
  MovieSearchRoute: typeof MovieSearchRoute
  MoviesPopularRoute: typeof MoviesPopularRoute
  MoviesRecentRoute: typeof MoviesRecentRoute
  MoviesTrendingRoute: typeof MoviesTrendingRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sitemap.xml': {
      id: '/sitemap.xml'
      path: '/sitemap.xml'
      fullPath: '/sitemap.xml'
      preLoaderRoute: typeof SitemapDotxmlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/trending': {
      id: '/movies/trending'
      path: '/movies/trending'
      fullPath: '/movies/trending'
      preLoaderRoute: typeof MoviesTrendingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/recent': {
      id: '/movies/recent'
      path: '/movies/recent'
      fullPath: '/movies/recent'
      preLoaderRoute: typeof MoviesRecentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/popular': {
      id: '/movies/popular'
      path: '/movies/popular'
      fullPath: '/movies/popular'
      preLoaderRoute: typeof MoviesPopularRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movie/search': {
      id: '/movie/search'
      path: '/movie/search'
      fullPath: '/movie/search'
      preLoaderRoute: typeof MovieSearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movie/$shortId': {
      id: '/movie/$shortId'
      path: '/movie/$shortId'
      fullPath: '/movie/$shortId'
      preLoaderRoute: typeof MovieShortIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivacyRoute: PrivacyRoute,
  SitemapDotxmlRoute: SitemapDotxmlRoute,
  MovieShortIdRoute: MovieShortIdRoute,
  MovieSearchRoute: MovieSearchRoute,
  MoviesPopularRoute: MoviesPopularRoute,
  MoviesRecentRoute: MoviesRecentRoute,
  MoviesTrendingRoute: MoviesTrendingRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
